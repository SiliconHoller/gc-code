/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphCuts.java
 *
 * Created on Aug 3, 2010, 11:50:20 PM
 */

package edu.ohio.graphcuts.gui;

import edu.ohio.graphcuts.gui.diag.LoadRawDialog;
import edu.ohio.graphcuts.gui.io.State;
import edu.ohio.graphcuts.gui.msg.MessageBoard;
import edu.ohio.graphcuts.gui.msg.StatusMessage;
import edu.ohio.graphcuts.gui.panel.GraphCutPanel;
import edu.ohio.graphcuts.gui.panel.ImageInfoPanel;
import edu.ohio.graphcuts.gui.panel.ImagePanel;
import edu.ohio.graphcuts.gui.panel.KMeansPanel;
import edu.ohio.graphcuts.gui.panel.SegTreePanel;
import edu.ohio.graphcuts.gui.tree.CutImage;
import edu.ohio.graphcuts.gui.tree.NodeHandler;
import edu.ohio.graphcuts.gui.tree.SegTreeHandler;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;

/**
 *
 * @author david
 */
public class GraphCuts extends javax.swing.JFrame implements MessageBoard {

    private SegTreePanel treePanel;
    private SegTreeHandler sth;
    private NodeHandler nodehandler;
    private StatusMessage status;
    private ImagePanel imgPanel;
    private ImageInfoPanel infoPanel;
    private GraphCutPanel gcp;
    private KMeansPanel kmp;
    private JFileChooser jfc;
    private LoadRawDialog lrd;
    private State state;

    /** Creates new form GraphCuts */
    public GraphCuts() {
        initComponents();
        status = StatusMessage.getInstance();
        status.addBoard(this);
        state = new State();
        treePanel = new SegTreePanel();
        splitPane.setLeftComponent(treePanel);
        nodehandler = new NodeHandler();
        sth = new SegTreeHandler(treePanel.getTree());
        imgPanel = new ImagePanel();
        infoPanel = new ImageInfoPanel();
        kmp = new KMeansPanel();
        gcp = new GraphCutPanel();
        tabPane.addTab("Image", imgPanel);
        tabPane.addTab("Properties",infoPanel);
        tabPane.addTab("K-Means",kmp);
        tabPane.addTab("Graph Cut",gcp);
    }




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        neighborButtonGroup = new javax.swing.ButtonGroup();
        bottomPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        splitPane = new javax.swing.JSplitPane();
        tabPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        photoMenuItem = new javax.swing.JMenuItem();
        rawMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        resultDirMenuItem = new javax.swing.JMenuItem();
        fourNRadioButton = new javax.swing.JRadioButtonMenuItem();
        eightNRadioButton = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GraphCut Analysis & Segmentation");

        bottomPanel.setLayout(new java.awt.GridLayout());

        statusLabel.setText("Status...");
        statusLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        bottomPanel.add(statusLabel);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        splitPane.setRightComponent(tabPane);

        getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        photoMenuItem.setText("Open Grayscale PNG...");
        photoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                photoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(photoMenuItem);

        rawMenuItem.setText("Open RAW Medical Image...");
        rawMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rawMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(rawMenuItem);
        fileMenu.add(jSeparator1);

        quitMenuItem.setText("Quit");
        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        editMenu.setText("Edit");

        resultDirMenuItem.setText("Select Directory for Results...");
        resultDirMenuItem.setToolTipText("Select directory where results will be saved.  Default is current running directory.");
        editMenu.add(resultDirMenuItem);

        neighborButtonGroup.add(fourNRadioButton);
        fourNRadioButton.setSelected(true);
        fourNRadioButton.setText("Use 4-Neighbor Graphs");
        editMenu.add(fourNRadioButton);

        neighborButtonGroup.add(eightNRadioButton);
        eightNRadioButton.setText("Use 8-Neighbor Graphs");
        editMenu.add(eightNRadioButton);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void photoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_photoMenuItemActionPerformed
        if (jfc == null) {
            jfc = new JFileChooser();
        }
        jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int val = jfc.showOpenDialog(this);
        if (val == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            try {
                String baseName = f.getName();
                state.setCurrentImage(ImageIO.read(f));
                //if (fourNRadioButton.isSelected()) {
                //    graph = pngops.get4NGraph(currImage);
                //} else {
                //    graph = pngops.get8NGraph(currImage);
                //}
                CutImage ci = new CutImage(baseName);
                sth.newRoot(ci);
                state.setCutImage(ci);
                imgPanel.setImage(state.getCurrentImage());
                infoPanel.showInfo(state.getCurrentImage());
            } catch (Exception e) {
                status.post("Problem loading file image",MessageBoard.SEVERE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_photoMenuItemActionPerformed

    private void rawMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rawMenuItemActionPerformed
        if (lrd == null) {
            lrd = new LoadRawDialog(this,true);
        }
        lrd.setLocationRelativeTo(this);
        lrd.setVisible(true);
        lrd.setModal(true);
        if (!lrd.isCancelled()) {
            try {
                File selFile = new File(lrd.getSelectedFile());
                int w = lrd.getImageWidth();
                int h = lrd.getImageHeight();
                //RawCodec rc = new RawCodec(selFile,w,h);
                //if (fourNRadioButton.isSelected()) {
                //    graph = rc.create4NGraph();
                //} else {
                //    graph = rc.create8NGraph();
                //}
                String baseName = selFile.getName();
                BufferedImage currImage = state.getPngOps().rawToPng(selFile, w, h);
                CutImage ci = new CutImage(baseName);
                state.setCurrentImage(currImage);
                state.setCutImage(ci);
                sth.newRoot(ci);

                infoPanel.showInfo(currImage);
                imgPanel.setImage(currImage);
            } catch (Exception e) {
                status.post("Unable to load RAW image.",MessageBoard.SEVERE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_rawMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphCuts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JRadioButtonMenuItem eightNRadioButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButtonMenuItem fourNRadioButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.ButtonGroup neighborButtonGroup;
    private javax.swing.JMenuItem photoMenuItem;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem rawMenuItem;
    private javax.swing.JMenuItem resultDirMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables

    public void post(String txt) {
        statusLabel.setForeground(Color.black);
        statusLabel.setText(txt);
    }

    public void post(String txt, int severity) {
        Color foreground;
        switch(severity) {
            case MessageBoard.IMPORTANT:
                foreground = Color.orange;
                break;
            case MessageBoard.SEVERE:
                foreground = Color.red;
                break;
            default:
                foreground = Color.black;
                break;
        }
        statusLabel.setForeground(foreground);
        statusLabel.setText(txt);
    }

}
